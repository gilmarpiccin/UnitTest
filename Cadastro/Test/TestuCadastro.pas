unit TestuCadastro;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, DB, SysUtils, DBClient, ComCtrls, Windows, Mask, StdCtrls, Menus, Messages,
  DBGrids, Variants, uCadastro, Controls, Classes, Dialogs, Grids, Forms, ExtCtrls, Graphics;

type
  // Test methods for class TfrmCadastro

  TestTfrmCadastro = class(TTestCase)
  strict private
    FfrmCadastro: TfrmCadastro;
  private
    procedure TestGridEditavel;
  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestCalcPercentual;
    procedure TestValData;
    procedure TestCampoNumerico;
    procedure TestCampoNome;
    procedure TestBaseCampoNull;
    procedure TestGridConfigurada;
  end;

implementation

procedure TestTfrmCadastro.SetUp;
begin
  FfrmCadastro := TfrmCadastro.CreateFrm(nil);
end;

procedure TestTfrmCadastro.TearDown;
begin
  FfrmCadastro.Free;
  FfrmCadastro := nil;
end;

procedure TestTfrmCadastro.TestBaseCampoNull;
var
  cds: TClientDataSet;
  I: Integer;
  dlg: TOpenDialog;
begin
  //Deve validar se algum campo foi gravado sem informação
  //partindo da premissa que todos os campos são obrigatório

  cds := TClientDataSet.Create(nil);
  dlg := TOpenDialog.Create(nil);

  try
    // para facilitar selecionar o xml com os dados
    if not dlg.Execute then
     Exit;

    //Carrega em memoria os dados da tabela/xml
    if FileExists(dlg.FileName) then
      cds.LoadFromFile(dlg.FileName);

    //percorre os registros
    cds.First;
    while not cds.Eof do
    begin

      // percorre os campos
      for I := 0 to cds.FieldCount - 1 do
       CheckFalse(cds.Fields[I].AsString = EmptyStr,
                 'Base de dados permitindo campo nulo'+
                 ' Registro:' +IntToStr(cds.RecNo)+
                 ' Campo:'+cds.Fields[I].FieldName);

      cds.Next;
    end;

  finally
    //remove os componentes da memoria
    FreeAndNil(cds);
    FreeAndNil(dlg);
  end;
end;

procedure TestTfrmCadastro.TestCalcPercentual;
var
  ReturnValue: Double;
  percent: Double;
  valor: Double;
  ResulEsperado:Double;
begin
  //deve validar se função está realizando o calculo corretamente
  valor:= 1000;
  percent := 10;
  ReturnValue   := FfrmCadastro.CalcPercentual(valor, percent);
  ResulEsperado := 1100;

  CheckEquals(ResulEsperado,ReturnValue,0,'Calculo de percentual está incorreto.');

end;

procedure TestTfrmCadastro.TestCampoNome;
var
  ReturnValue: Boolean;
begin
  //deve validar se o campo da tela esta permitindo
  //exceder o tamanho máximo na base para o campo

  FfrmCadastro.edNOME.SetSelText('Gilmar de camargo piccin  ');
  ReturnValue:= Length(FfrmCadastro.edNOME.Text)> 25 ;
  CheckFalse(ReturnValue,'campo permitindo informar mais de 25 caracteres');

end;

procedure TestTfrmCadastro.TestCampoNumerico;
var
  ReturnValue: Boolean;
begin
  //deve validar se o campo da tela está removendo letras
  FfrmCadastro.edVALOR.Text:='Gilmar123';
  try
    StrToFloat(FfrmCadastro.edVALOR.Text);
    ReturnValue:= True;
  except
    ReturnValue:= false;
  end;

  CheckTrue(ReturnValue,'deve permitir informar apenas números');

end;

procedure TestTfrmCadastro.TestGridConfigurada;
begin
  with FfrmCadastro.dbg do
  begin
    CheckTrue(DataSource <> nil         ,'Não há DataSource vinculado a grid');
    CheckTrue(DataSource.DataSet <> nil ,'Não há DataSet vinculado ao DataSource da grid');
  end;
end;

procedure TestTfrmCadastro.TestGridEditavel;
begin

end;

procedure TestTfrmCadastro.TestValData;
var
  ReturnValue: Boolean;
  data: string;
begin
  // deve verificar se a função q valida a data está validando corretamente
  data := '11/20/2016';
  ReturnValue := FfrmCadastro.ValData(data);
  CheckFalse(ReturnValue,'Não está validando data inválida');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTfrmCadastro.Suite);
end.

